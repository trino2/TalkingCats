#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('chat-app:server');
var http = require('http');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);
var io = require('socket.io').listen(server); 
var connections = [];
var peopleList = [];

// Creates Socket connection between client and server
io.sockets.on('connection', function(socket) {
  connections.push(socket);
  console.log('Connected: %s sockets connected', connections.length);
  
// When client disconnects its removed from the list of users and sends to all clients
  socket.on("disconnect", function(data) {
    var userDelete = connections.indexOf(socket);
    connections.splice(connections.indexOf(socket), 1); 
    console.log('Disconnected: %s sockets connected', connections.length);
    peopleList.splice(userDelete, 1);
    io.sockets.emit('list', peopleList);
  });
  
// When a new user arrives it logs the name and sends it to all clients  
  socket.on('newName', function(name) {
    console.log("in newName: received name: " + name); 
    peopleList.push(name); 
    console.log("in newName: peopeList: "); 
    console.log(peopleList);
    io.sockets.emit('list', peopleList);
  });
  
// When message arrives it sends message to all clients
  socket.on('send message', function(data) {
    console.log('Data message', data.message);
    console.log('sender: ', data.name);
    io.sockets.emit('new message', {message: data.message, name: data.name, peopleList: peopleList});
  });
});

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}